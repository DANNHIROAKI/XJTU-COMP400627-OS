<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="第七章 同步">
  <outline text="Background（背景）" _note="多个进程对共享数据的并发访问可能导致数据的不一致性，要保持数据的一致性，就需要一种保证并发进程的正确执行顺序的机制&#10;&#10;**race condition 竞争条件**&#10;&#10;&gt; 若干个并发的进程(线程)都可以访问和操纵同一个共享数据,从而执行结果就取决于并发进程对这个数据的访问次序.&#10;&gt;&#10;&gt; 为了保证数据的一致性,需要有同步机制来保证多个进程对共享数据的**互斥访问.**&#10;&#10;**进程类型**：协作进程、独立进程&#10;&#10;**进程间资源访问冲突**：共享变量的修改冲突、操作顺序冲突&#10;&#10;**进程间的制约关系**&#10;&#10;&gt; **间接制约**：有些资源需要互斥使用，因此各进程进行竞争－－独占分配到的部分或全部共享资源，进程的这种关系为**进程的互斥**  &#10;&gt; **直接制约**：进行协作－－具体说，一个进程运行到某一点时要求另一伙伴进程为它提供消息，在未获得消息之前，该进程处于等待状态，获得消息后被唤醒进入就绪态.进程的这种关系为**进程的同步（等待来自其他进程的信息，“同步”)**&#10;&#10;**进程间的交互关系**&#10;&#10;&gt; **互斥**，指多个进程不能同时使用同一个资源；&#10;&gt;&#10;&gt; **同步**，进程之间的协作；&#10;&gt;&#10;&gt; **死锁**，指多个进程互不相让，都得不到足够的资源；&#10;&gt;&#10;&gt; **饥饿**，指一个进程一直得不到资源（其他进程可能轮流占用资源）">
  </outline>
  <outline text="The Critical-Section Problem （临界区问题）" _note="**临界区(critical section)**：进程中访问**临界资源**的一段代码。（考点）&#10;&#10;实现进程对临界资源的互斥访问—各进程互斥的进入自己的临界区&#10;&#10;假定一个系统有n个进程{P0,P1,……,Pn-1},每个进程有一个代码段称为临界区,在该区中进程可能修改共享变量\\更新一个表\\写一个文件等.当一个进程在临界区中执行时,其他进程都不能进入临界区&#10;&#10;临界区的执行在时间上是互斥的,进程必须请求允许进入临界区&#10;&#10;&gt; **进入区(entry&#10;&gt; section)**：在进入临界区之前，检查**可否进入**临界区的一段代码。如果可以进入临界区，通常设置相应“正在访问临界区”标志。  &#10;&gt; **退出区(exit section)**：用于将&quot;正在访问临界区&quot;标志清除。  &#10;&gt; **剩余区(remainder section)**：代码中的其余部分。&#10;&#10;**临界区问题的解决方案应满足以下三条要求**&#10;&#10;&gt; **互斥Mutual&#10;&gt; Exclusion**。假定进程*Pi*在其临界区内执行，其他任何进程将被排斥在自己的临界区之外&#10;&gt;&#10;&gt; **有空让进&#10;&gt; Progress**。临界区虽没有进程执行，但有些进程需要进入临界区，不能无限期地延长下一个要进入临界区进程的等待时间.&#10;&gt;&#10;&gt; **有限等待Bounded&#10;&gt; Waiting**。在一个进程提出进入临界区的请求和该请求得到答复的时间内，其他进程进入临界区的次数必须是有限的&#10;&#10;另一种表述(考研概念)&#10;&#10;&gt; **空闲则入**：其他进程均不处于临界区，则允许一个请求进入临界区的进程立即进入自己的临界区&#10;&gt;&#10;&gt; **忙则等待**：已有进程处于其临界区，则其他进程无法进入&#10;&gt;&#10;&gt; **有限等待**：等待进入临界区的进程不能&quot;死等&quot;；&#10;&gt;&#10;&gt; **让权等待**：不能进入临界区的进程，应释放CPU（如转换到阻塞状态）">
  </outline>
  <outline text="两进程互斥的软件方法">
    <outline text="算法一" _note="**缺点**：&#10;&#10;&gt; 强制轮流进入临界区，没有考虑进程的实际需要。容易造成资源利用不充分：在进程1让出临界区之后，进程2使用临界区之前，进程1不可能再次使用临界区；&#10;&gt;&#10;&gt; 不能保证空闲让进">
    </outline>
    <outline text="算法二" _note="**优点**：不用交替进入，可连续使用；&#10;&#10;**缺点**：&#10;&#10;&gt; 两进程可能都进入不了临界区，会造成&quot;死等&quot;&#10;&gt;&#10;&gt; Pi和Pj在**切换自己flag之后和检查对方flag之前**有一段时间，如果都切换flag，都检查不通过。">
    </outline>
    <outline text="算法三" _note="">
    </outline>
  </outline>
  <outline text="Synchronization Hardware （同步的硬件实现）" _note="硬件方法的**优点**&#10;&#10;&gt; 适用于任意数目的进程，在单处理器或多处理器上&#10;&gt;&#10;&gt; 简单，容易验证其正确性&#10;&gt;&#10;&gt; 可以支持进程内存在多个临界区，只需为每个临界区设立一个布尔变量&#10;&#10;硬件方法的**缺点**&#10;&#10;&gt; 等待要耗费CPU时间，不能实现&quot;让权等待&quot;&#10;&gt;&#10;&gt; 可能&quot;饥饿&quot;：从等待进程中随机选择一个进入临界区，有的进程可能一直选不上">
  </outline>
  <outline text="Semaphores （信号量）[重中之重]" _note="前面的互斥算法都存在问题，它们是平等进程间的一种协商机制，需要一个**地位高于进程的管理者来解决公有资源的使用问题**。OS可从进程管理者的角度来处理互斥的问题，**信号量**就是OS提供的管理公有资源的有效手段&#10;&#10;&gt; 信号量是一个确定的二元组（s，q），其中s是一个具有非负初值的整型变量，q是一个初始状态为空的队列。&#10;&gt;&#10;&gt; 整型变量s表示系统中某类资源的数目，大于零时表示**当前可用资源数**，小于零时，其绝对值表示因**请求该类资源而被阻塞**的资源数&#10;&gt;&#10;&gt; 信号量的值仅由P操作（wait操作）和V操作（signal操作）进行改变&#10;&#10;P、V分别是荷兰语的test(proberen)和increment(verhogen)&#10;&#10;会存在忙等——自旋锁:进程在等待锁时自旋&#10;&#10;不需要忙等的改进如下：&#10;&#10;改进前信号量不会为负数，改进后为负数，而且负数的绝对值等于等待的进程数&#10;&#10;**记录型信号量**">
    <outline text="利用信号量实现互斥" _note="为临界资源设置一个**互斥信号量**，**其初值为1**；&#10;&#10;`Semaphore S; // initialized to·`&#10;&#10;在每个进程中将临界区代码置于P(S)和V(S)原语之间&#10;&#10;      P(S);&#10;&#10;    	   CriticalSection()&#10;&#10;      V(S);">
    </outline>
    <outline text="利用信号量来描述前驱关系（同步）" _note="前趋关系：并发执行的进程P1和P2中，分别有代码C1和C2，要求C1在C2开始前完成；&#10;&#10;为每个前趋关系设置一个**同步信号量**S12，**其初值为0**&#10;&#10;**方法：前趋图**&#10;&#10;&gt; 若图中存在结点S1指向结点S2的有向边，表示进程P1中的程序段S1应该先执行，而进程P2中的程序段S2后执行。设置一个信号量s,初值为0，将V(s)放在S1后面，而在S2前面先执行P(s)。&#10;&#10;进程P1的语句序列为：S1;V(s)&#10;&#10;进程P2的语句序列为：P(s);S2&#10;&#10;&gt; ⭐️ 前面的先增加了，后面的才能减&#10;&#10;**举例**&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211019164630044.png)&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211019164907162.png)&#10;&#10;**缺点**&#10;&#10;可能会引起死锁与饥饿&#10;&#10;**信号量机制**&#10;&#10;&gt; 同步、互斥的约束条件&#10;&gt;&#10;&gt; 临界资源的抽象&#10;&gt;&#10;&gt; 初始条件&#10;&gt;&#10;&gt; 正确的P-V操作">
    </outline>
  </outline>
  <outline text="Classical Problems of Synchronization（经典同步问题）">
    <outline text="哲学家就餐问题Dining-Philosophers Problem" _note="问题描述：（由Dijkstra首先提出并解决）5个哲学家围绕一张圆桌而坐，桌子上放着5支筷子，每两个哲学家之间放一支；哲学家的动作包括思考和进餐，进餐时需要同时拿起他左边和右边的两支筷子，思考时则同时将两支筷子放回原处。如何保证哲学家们的动作有序进行？如：不出现相邻者同时要求进餐；不出现有人永远拿不到筷子；&#10;&#10;**信号量**&#10;&#10;筷子是临界资源，设立一个信号量数组来表示筷子&#10;&#10;**互斥问题**&#10;&#10;    Repeat&#10;        思考；&#10;        取chopStick[i];//拿起左手边筷子&#10;        取chopStick[(i+1) mod 5]；//拿起右手边筷子&#10;        进食；&#10;        放chopStick[i];&#10;        放chopStick[(i+1) mod 5]；&#10;    Until false;&#10;&#10;可能会出现死锁，五个哲学家每人拿起了他左边的筷子,会导致五个筷子都被占用，当他们试图拿右边的筷子时，会“无限等待”&#10;&#10;**解决办法**&#10;&#10;&gt; 最多允许四个哲学家同时就坐&#10;&gt;&#10;&gt; 同时拿起两根筷子&#10;&gt;&#10;&gt; 非对称解决——奇偶交替拿">
    </outline>
    <outline text="生产者消费者问题" _note="问题描述：若干进程通过有限的共享缓冲区交换数据。其中，&quot;生产者&quot;进程不断写入，而&quot;消费者&quot;进程不断读出；共享缓冲区共有N个；任何时刻只能有一个进程可对共享缓冲区进行操作。&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211019170423348.png)&#10;&#10;采用信号量机制：&#10;&#10;&gt; 设立两个同步信号量：full是&quot;满&quot;数目，初值为0&#10;&gt; ，empty是&quot;空&quot;数目，初值为N。实际上，full + empty == N&#10;&gt;&#10;&gt; mutex用于访问缓冲区时的互斥，初值是1&#10;&gt;&#10;&gt; 每个进程中各个P操作的次序是重要的：**先检查资源数目，再检查是否互斥**――否则可能死锁&#10;&#10;&gt; 🏷**注意**！&#10;&gt;&#10;&gt; P(full)/P(empty)与P(mutex)的顺序不可颠倒，必须先对资源信号量进行P操作，在对互斥信号量进行P操作，否则会产生死锁&#10;&gt;&#10;&gt; 例如，此时缓冲区已满，而生产者先P（mutex），在P（empty），由于此时empty为0，导致失败，生产者进程无法继续进行，始终掌握缓冲池访问权无法释放，因而消费者无法取出产品，导致死锁，V操作则没有限制&#10;&gt;&#10;&gt; 总结来说，在有多个信号量同时存在的情况下，P操作往往是不能颠倒顺序的，必须先对资源信号量进行P操作再对互斥信号量进行P操作，这样才能保证在占有信号量访问权时保证资源可以使用">
    </outline>
    <outline text="读者写者问题Readers and Writers Problem" _note="&#10;问题描述：对共享资源的读写操作，任一时刻“写者”最多只允许一个，而“读者”则允许多个&#10;&#10;–“读－写”互斥，–“写－写”互斥，–&quot;读－读&quot;允许&#10;&#10;如果读者来：&#10;&#10;&gt; 无读者、写者，新读者可以读&#10;&gt;&#10;&gt; 有写者等，但有其它读者正在读，则新读者也可以读&#10;&gt;&#10;&gt; 有写者写，新读者等&#10;&#10;如果写者来：&#10;&#10;&gt; 无读者，新写者可以写&#10;&gt;&#10;&gt; 有读者，新写者等待（读者优先）&#10;&gt;&#10;&gt; 有其它写者，新写者等待&#10;&#10;对写者起决定作用的是第一个读者和最后一个读者&#10;&#10;**采用信号量机制**&#10;&#10;&gt; 信号量mutex表示&quot;允许写&quot;，初值是1。&#10;&gt;&#10;&gt; 公共变量Rcount表示“正在读”的进程数，初值是0；&#10;&gt;&#10;&gt; 信号量Rmutex表示对Rcount的互斥操作，初值是1。">
      <outline text="写者优先" _note="    //读写问题——写者优先&#10;    reader(){&#10;    	while(true){&#10;    		P(Rmutex);//保护Rcount&#10;    		if(Rcount==0)&#10;    			P(mutex);//第一个读者，阻止写入&#10;    		Rcount++;&#10;    		V(Rmutex);//允许其他读者读&#10;    		read;&#10;    		P(Rmutex);//保护Rcount&#10;    		Rcount--;&#10;    		if(Rcount==0)&#10;    			V(mutex);//允许写入&#10;    		V(Rmutex);//允许其他读者读&#10;    	}		&#10;    }&#10;    writer(){&#10;    	P(mutex);//对写进行控制&#10;    	write;&#10;    	V(mutex);&#10;    }">
      </outline>
      <outline text="公平情况" _note="完全按照到达情况，即当一个读者试图进行读操作时，如果有写者正在等待或正在写，那这个读者需要等待写着写完才能开始&#10;&#10;因此需要引入一个互斥信号量Wmutex，初始值为1，用于表示是否存在正在写或者正在等待的写者，若存在则禁止新读者进入&#10;&#10;    //读写问题——公平情况&#10;    reader(){&#10;    	while(true){&#10;    		P(Wmutex);//是否有写者存在，无写者直接进入&#10;    		P(Rmutex);//保护Rcount&#10;    		if(Rcount==0)&#10;    			P(mutex);//第一个读者，阻止写入&#10;    		Rcount++;&#10;    		V(Rmutex);//允许其他读者读&#10;    		V(Wmutex);//释放Wmutex&#10;    		read;&#10;    		P(Rmutex);//保护Rcount&#10;    		Rcount--;&#10;    		if(Rcount==0)&#10;    			V(mutex);//允许写入&#10;    		V(Rmutex);//允许其他读者读&#10;    	}		&#10;    }&#10;    writer(){&#10;    	P(Wmutex);//是否有写者存在，无写者直接进入&#10;    	P(mutex);//对写进行控制&#10;    	write;&#10;    	V(mutex);&#10;    	V(Wmutex);&#10;    }">
      </outline>
      <outline text="写者优先" _note="要实现真正的写者优先，即当写者和读者同时等待时，后续写者到达时可以插队到等待的读者前面，只要队列中有写者，无论何时到达，都优先于读者被唤醒，需要设置额外的信号量readable，用于控制写者到达时可以优先于读者，同时要增设一个整数Wcount用于统计写者的数量。与之前的算法相比，Wmutex的作用有所变化，现在用于控制写者互斥访问Wcount&#10;&#10;    semaphore mutex=1;//控制互斥访问数据区&#10;    semaphore Rmutex=1;//用于读者互斥访问Rcount&#10;    semaphore Wmutex=1;//用于写者互斥访问Wcount&#10;    semaphore readable=1;//用于表示当前是否有写者&#10;    int Rcount=0,Wcount=0;//记录读者和写者的数量&#10;    reader(){&#10;    	P(readable);//检查是否有写者，没有才进入，反映了写者优先的原则&#10;    	P(Rmutex);//保护Rcount&#10;    	if(Rcount==0)&#10;    		P(mutex);//第一个读者，占用数据区&#10;    	Rcount++;&#10;    	V(Rmutex);//允许其他读者读&#10;    	V(readable);//释放readable&#10;    	read;&#10;    	P(Rmutex);//保护Rcount&#10;    	Rcount--;&#10;    	if(Rcount==0)&#10;    		V(mutex);//释放数据区&#10;    	V(Rmutex);//允许其他读者读 &#10;    }&#10;    writer(){&#10;    	P(Wmutex);//准备修改Wcount&#10;    	if(Wcount==0)&#10;    		P(readable);//第一个写者，组织后续读者进入&#10;    	Wcount++;//写者数+1&#10;    	V(Wmutex);//释放，允许其他写者修改Wcount&#10;    	P(mutex);//等当前的读者或写者完成时，占用数据区&#10;    	写操作；&#10;    	V(mutex);//写完，释放数据区&#10;    	p(Wmutex);//准备修改Wcount&#10;    	Wcount--;&#10;    	if(Wcount==0)&#10;    		V(readable==0);//若为最后一个写者，则允许读者进入&#10;    	V(Wmutex);&#10;    }">
      </outline>
    </outline>
    <outline text="PV操作讨论" _note="信号量的物理含义：&#10;&#10;&gt; S&amp;gt;0表示有S个资源可用&#10;&gt;&#10;&gt; S=0表示无资源可用&#10;&gt;&#10;&gt; S&amp;lt;0则| S |表示S等待队列中的进程个数&#10;&gt;&#10;&gt; P(S):表示申请一个资源&#10;&gt;&#10;&gt; V(S):表示释放一个资源。&#10;&gt;&#10;&gt; 信号量的初值应该大于等于0&#10;&#10;**PV操作必须成对出现，有一个P操作就一定有一个V操作**&#10;&#10;&gt; 当为互斥操作时，它们处于同一进程&#10;&gt;&#10;&gt; 当为同步操作时，则不在同一进程中出现&#10;&gt;&#10;&gt; 对于前后相连的两个P(S1)和P(S2)&#10;&gt; ，顺序是至关重要的:同步P操作应该放在互斥P操作前,而两个V操作顺序则无关紧要">
    </outline>
  </outline>
  <outline text="信号量集">
    <outline text="AND信号量集" _note="AND型信号量集用于同时需要多种资源且每种占用一个时的信号量操作；&#10;&#10;•一段处理代码需要同时获取两个或多个临界资源――可能死锁：各进程分别获得部分临界资源，然后等待其余的临界资源，&quot;各不相让&quot;&#10;&#10;•基本思想：在一个原语中，将一段代码同时需要的多个临界资源，**要么全部分配给它，要么一个都不分配**。称为Swait(Simultaneous&#10;Wait)。在Swait时，各个信号量的次序并不重要，虽然会影响进程归入哪个阻塞队列，但是由于是对资源全部分配或不分配，所以总有进程获得全部资源并在推进之后释放资源，因此不会死锁。&#10;&#10;     Swait(S1, S2, …, Sn)	//P原语；&#10;     {&#10;     while (TRUE)&#10;     {&#10;          if (S1 &gt;=1 &amp;&amp; S2 &gt;= 1 &amp;&amp; … &amp;&amp; Sn &gt;= 1)&#10;      {		//满足资源要求时的处理；&#10;            for (i = 1; i &lt;= n; ++i)  --Si;	&#10;               //注：与wait的处理不同，这里是在确信可满足&#10;               //全部资源要求时，才进行减1操作；&#10;            break;&#10;          }&#10;      else&#10;      {    //某些资源不够时的处理；&#10;            进程进入第一个小于1信号量的等待队列Sj.queue;&#10;            阻塞调用进程;&#10;          }&#10;     }&#10;     }&#10;    Ssignal(S1, S2, …, Sn)&#10;     {&#10;       for (i = 1; i &lt;= n; ++i)&#10;       {&#10;         ++Si;		//释放占用的资源；&#10;         for (each process P waiting in Si.queue)&#10;               //检查每种资源的等待队列；&#10;         {&#10;           从等待队列Si.queue中取出进程P;&#10;           if (判断进程P是否通过Swait中的测试)&#10;                //注：与signal不同，这里要进行重新判断；&#10;               {	//通过检查（资源够用）时的处理；&#10;     	进程P进入就绪队列;&#10;               }&#10;           else&#10;               {	//未通过检查（资源不够用）时的处理；&#10;     	进程P进入某等待队列；&#10;               }&#10;         }&#10;       }&#10;     }">
    </outline>
    <outline text="一般“信号量集”" _note="-   一般信号量集用于同时需要多种资源、每种占用的数目不同、且可分配的资源还存在一个临界值时的处理；&#10;&#10;-   一次需要N个某类临界资源时，就要进行N次wait操作－－低效又可能死锁&#10;&#10;-   基本思想：在AND型信号量集的基础上进行扩充：进程对信号量Si的测试值为ti（用于信号量的判断，即Si &amp;gt;=&#10;    ti，表示资源数量低于ti时，便不予分配），占用值为di（用于信号量的增减，即Si&#10;    = Si - di和Si = Si + di）&#10;&#10;-   Swait(S1, t1, d1; ...; Sn, tn, dn);&#10;&#10;-   Ssignal(S1, d1; ...; Sn, dn);&#10;&#10;-   一般“信号量集”的几种特殊情况：&#10;&#10;    &gt; Swait(S, d, d)表示每次申请d个资源，当少于d个时，便不分配；&#10;    &gt;&#10;    &gt; Swait(S, 1, 1)表示互斥信号量；&#10;    &gt;&#10;    &gt; Swait(S, 1, 0)作为一个可控开关&#10;    &gt;&#10;    &gt; &gt; 当S&amp;gt;=1时，允许多个进程进入临界区；&#10;    &gt; &gt;&#10;    &gt; &gt; 当S=0时，禁止任何进程进入临界区；&#10;&#10;    一般信号量集未必成对使用Swait和Ssignal：如：一起申请，但不一起释放；">
    </outline>
  </outline>
  <outline text="Monitors （管程）[了解]">
    <outline text="基本概念" _note="**管程**是把所有进程对某一临界资源的使用进行集中控制，以提高可靠性。相比之下，管程比信号量好控制。管程是管理进程间同步的机制，它保证进程互斥地访问共享变量，并方便地阻塞和唤醒进程。管程可以函数库的形式实现。&#10;&#10;其**基本思想是把信号量及其操作原语封装在一个对象内部**。即：将共享变量以及对共享变量能够进行的所有操作集中在一个模块中。&#10;&#10;管程的定义：**管程是关于共享资源的数据结构及一组针对该资源的操作过程所构成的软件模块。**&#10;&#10;引入管程可提高代码的可读性，便于修改和维护，正确性易于保证。采用集中式同步机制。一个操作系统或并发程序由若干个这样的模块所构成，一个模块通常较短，模块之间关系清晰。&#10;&#10;任一时刻在管程中只有一个线程是能运行的，所以程序员不必去实现互斥算法(而由管程本身实现).">
    </outline>
    <outline text="关键问题" _note="实现管程的三个关键问题&#10;&#10;&gt; **互斥**&#10;&gt;&#10;&gt; &gt; 并发进程需要互斥地进入管程&#10;&gt;&#10;&gt; **条件变量**&#10;&gt;&#10;&gt; &gt; 管程引入了条件变量，不同的条件变量，对应不同原因的进程等待队列。&#10;&gt;&#10;&gt; **同步**&#10;&gt;&#10;&gt; &gt; 在管程中必须设置两个同步操作原语wait和signal&#10;&#10;针对条件变量的两个同步操作原语:&#10;&#10;&gt; C.wait（c）：执行此操作的进程排入c队列尾部&#10;&gt;&#10;&gt; C.signal（c）：如果c队列为空，则相当于空操作，执行此操作的进程继续；否则唤醒第一个等待者&#10;&#10;当进程通过管程请求访问共享数据而未能满足时，调用wait原语在有关的条件变量上等待，当另一进程访问完该共享数据且释放后，调用signal原语，唤醒在有关的条件变量上等待的首进程。">
    </outline>
    <outline text="生产者消费者问题再解决" _note="建立一个管程PC，它包括两个过程&#10;&#10;&gt; put（item）:将生产的消息放入缓冲池&#10;&gt;&#10;&gt; get（item），从缓冲池取出消息&#10;&#10;设置一变量count表示缓冲池已存消息数目&#10;&#10;设置**两个条件变量**notfull, notempty表示等待原因&#10;&#10;     Type PC=monitor&#10;      var  in , out , count : integer ;&#10;             buffer : array [ 0 , … ,n-1] of item ;&#10;            notfull, notempty: condition ;&#10;     procedure  entry  put (item)&#10;        begin&#10;             if  count &gt;= n  then  notfull.wait ;&#10;             buffer ( in ) : = nextp ;&#10;             in := (in+1) mod n ;&#10;             count = count + 1 ;&#10;             if notempty.queue  then notempty.signal ;&#10;       end&#10;     procedure entry  get ( item)&#10;          begin&#10;                if  count &lt;= 0 then  notempty.wait ;&#10;                nextc := buffer ( out ) ;&#10;               out := (out+1) mod n ;&#10;               count := count - 1 ;&#10;               if  notfull.queue then notfull.signal ;&#10;          end&#10;     begin  in := out := 0 ;  count := 0;  end">
    </outline>
  </outline>
</outline>
  </body>
</opml>
