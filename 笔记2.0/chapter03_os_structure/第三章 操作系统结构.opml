<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="第三章 操作系统结构">
  <outline text="3.1 Operating System Services操作系统服务" _note="操作系统提供的服务如下：&#10;&#10;-   用户界面：包括命令行界面与图形化界面&#10;&#10;-   程序执行&#10;&#10;-   I/O操作&#10;&#10;-   文件系统操作&#10;&#10;-   通信：两种方式：共享内存与消息交换(进程部分会细讲)&#10;&#10;-   错误检测&#10;&#10;其他的功能不是用于帮助用户，而是为了系统效率：&#10;&#10;-   资源分配 ：把资源分配给多个用户或多个同时运行的作业&#10;&#10;-   帐务：跟踪和记录用户对资源的使用，用于帐单和统计&#10;&#10;-   保护：确保对资源的所有访问均在控制中&#10;&#10;![](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211003163335191.png)">
  </outline>
  <outline text="3.2 System Calls系统调用">
    <outline text="1、系统调用的概念" _note="**系统调用提供在运行程序和操作系统之间的接口，属于一个软中断**&#10;&#10;通常以汇编语言指令形式提供；替代汇编语言的、供系统编程的语言，允许直接使用系统调用&#10;&#10;主要由程序通过**高级应用程序接口(API)**访问，而不是直接系统调用使用&#10;&#10;三个最常见的API&#10;&#10;&gt; Windows的Win32 API&#10;&gt;&#10;&gt; POSIX API用于基于POSIX的系统(包括几乎所有版本的UNIX、Linux和Mac OS X)&#10;&gt;&#10;&gt; 用于Java虚拟机(JVM)的Java API&#10;&#10;系统调用的处理机构:陷入（TRAP）或异常处理机构&#10;&#10;把由于系统调用引起处理机中断的指令称为陷入或异常指令（或称访管指令）">
    </outline>
    <outline text="2、系统调用的过程" _note="1️⃣ 当用户使用系统调用时，产生一条相应的指令&#10;&#10;2️⃣ CPU在执行到该指令时发生中断，发出有关的信号给陷入处理机构；&#10;&#10;3️⃣&#10;在处理系统调用之前，陷入处理机构还需**保存处理机现场**（PSW、PC、系统调用号、用户栈指针、通用寄存器、用户定义的参数等）&#10;&#10;4️⃣&#10;处理机构在收到了CPU发来的信号后，启动相关的处理程序去完成该系统调用所要求的功能&#10;&#10;5️⃣&#10;如何找到实现系统调用功能的子程序:**入口地址表**，每个入口地址与相应的系统程序对应&#10;&#10;6️⃣&#10;陷入处理程序用系统调用功能号查找入口地址表,得到该系统程序的入口地址,并执行之&#10;&#10;7️⃣ 系统调用处理结束后，要恢复处理机现场，从而用户程序可以继续执行&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211003164249246.png)">
    </outline>
    <outline text="3、向操作系统传递参数的常见方式" _note="3种常用方式用于在运行程序和操作系统之间的参数传递：&#10;&#10;1️⃣ 寄存器中的参数传递&#10;&#10;2️⃣ 参数存在内存的一张表中，表地址作为寄存器的参数传递&#10;&#10;此时，这些参数存在内存的块或者表中，而块和表中的地址通过寄存器来传递&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211003170141181.png)&#10;&#10;3️⃣ 程序把参数压入栈，由操作系统弹出">
    </outline>
    <outline text="4、系统调用的类型" _note="六大类：进程控制、文件管理、设备管理、信息维护、通信、保护">
    </outline>
  </outline>
  <outline text="3.3 System Programs系统程序" _note="**系统程序提供程序开发和执行的便利环境**。可划分为：&#10;&#10;&gt; 文件操作、状态信息、文件修改、程序语言支持、程序调入与执行、通信、应用程序&#10;&#10;大多数用户看到的操作系统是由系统程序定义而不是实际的系统调用定义的">
  </outline>
  <outline text="3.4 System Components系统部件" _note="Process Management 进程管理&#10;&#10;Main Memory Management主存管理&#10;&#10;Secondary-Storage Management 二级储存器管理&#10;&#10;I/O System Management I/O系统管理&#10;&#10;File Management 文件管理&#10;&#10;Protection System 保护系统&#10;&#10;Networking 网络处理&#10;&#10;Command-Interpreter System 命令解释器系统">
  </outline>
  <outline text="3.5 System Structure 系统结构">
    <outline text="1、简单结构" _note="**MS-DOS**&#10;&#10;MS-DOS 以最小的空间提供最多的功能&#10;&#10;&gt; 不划分模块&#10;&gt;&#10;&gt; 尽管有某种结构，器接口与功能层没有划分清楚&#10;&#10;应用程序可直接访问BIOS例程，来直接操纵设备，当然这受限于当时的硬件，intel8088没提供双模式和硬件保护，这使得DOS别无选择只能任由应用程序访问BIOS.&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015213656837.png)&#10;&#10;**UNIX**&#10;&#10;受硬件功能限制，早期UNIX只是有限的结构化。&#10;UNIX包括2个分离的部分:系统程序与内核&#10;&#10;内核包括了在物理硬件之上，系统调用之下的一切，提供文件系统、CPU调度、存储管理和其他操作系统功能：每一层有大量的功能&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015214509920.png)">
    </outline>
    <outline text="2、层次化结构" _note="分层法：操作系统划分为若干层，在低层上构建高层。底层（0层）为硬件；最高层（&#10;N层）为用户层&#10;&#10;**分层的基本原则**&#10;&#10;&gt; 每一层都使用其底层所提供的功能和服务，以便于系统调试和验证。&#10;&#10;**困难**&#10;&#10;&gt; 层次的划分和安排，要保证不出现双向依赖关系&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015214831105.png)&#10;&#10;**优点**(重点)&#10;&#10;&gt; 低层和高层可分别实现（便于扩充）；&#10;&gt;&#10;&gt; 高层错误不会影响到低层，便于调试、利于功能的增删改；&#10;&gt;&#10;&gt; 调用关系清晰（高层对低层单向依赖），避免递归调用，有利于保证设计和实现的正确性&#10;&#10;**缺点**&#10;&#10;&gt; 系统中所有进程的控制转移、通讯等任务全部交给系统的核心去管理，要花费一定的代价">
    </outline>
    <outline text="3、微内核" _note="Mach 首先使用微内核结构，典型系统如MACH和Windows NT&#10;&#10;通过划分系统程序和用户程序，把所有不必要的部件移出内核，形成一个小内核，微内核提供最少量的进程管理、存储管理，以及通信功能&#10;&#10;操作系统由**两大部分**组成&#10;&#10;&gt; 运行在核心态的内核  &#10;&gt; 运行在用户态并以C/S方式运行的进程层&#10;&#10;基于微内核结构的OS和传统OS相比，具有以下特点：&#10;&#10;1️⃣&#10;**内核精巧**．通常内核只由任务管理、虚存管理和进程间通信3个部分组成．传统OS内核中的许多部分都被移出内核．采取服务器方式实现；&#10;&#10;2️⃣&#10;**面向多处理机和分布式系统**．基于微内核的OS，在内核中引入了多处理机调度和管理机制，并引入了细粒度并发机制——线程，使得多个处理机可以在同一个任务中并行地执行；&#10;&#10;3️⃣ **基于客户／服务器体系结构**．在微内核结构的OS中，任务间通信机制——&#10;消息机制是系统的基础，OS的各种功能都以服务器方式实现，向用户提供服务．用户对服务器的请求是以消息传递的方式传给服务器的．&#10;&#10;优点&#10;&#10;&gt; 易于扩充，易于移植  &#10;&gt; 提高系统的可靠性：  &#10;&gt; 提供多种操作环境  &#10;&gt; 便于实现分布计算：以同样的调用形式，在下层可通过核心中的网络传送到远方服务器上&#10;&gt; (RPC, Remote Procedure Call)&#10;&#10;缺点&#10;&#10;&gt; 消息传递方式增加开销，使响应变慢">
    </outline>
    <outline text="4、模块" _note="**可加载的内核模块**&#10;&#10;&gt; 使用面向对象的方法&#10;&gt;&#10;&gt; 每个核心组件都是分开的&#10;&gt;&#10;&gt; 每个都通过已知的界面与其他人联系&#10;&gt;&#10;&gt; 每个都可根据需要在内核内加载&#10;&#10;内核提供核心服务，其他服务在内核运行时可动态加载，类似于分层，但是更加灵活，任何模块可以彼此调用，也类似于微内核，主模块只有核心功能，并知道如何加载其他模块和如何让模块进行通信">
    </outline>
    <outline text="5、混合系统" _note="大多数现代操作系统都不是单纯的一个结构，而是会采用多种结构">
    </outline>
  </outline>
  <outline text="3.6 Virtual Machines虚拟机" _note="**虚拟机是层次化的逻辑结果**。它把硬件和操作系统看成都是硬件，虚拟机为裸机提供了统一的接口，操作系统创建了多个进程，每一个进程有自己的处理器和（虚拟）内存&#10;&#10;**实现方式**：分时，共享&#10;&#10;**物理计算机的资源被共享，以创建虚拟机**&#10;&#10;&gt; CPU调度使得用户好像有自己的处理器&#10;&gt;&#10;&gt; Spooling（外部设备练级并行操作）和文件系统提供了虚拟卡片阅读机和打印机&#10;&gt;&#10;&gt; 普通用户终端成为虚拟机操作员的控制台&#10;&#10;**优缺点**&#10;&#10;&gt; 虚拟机概念提供对**系统资源的完全保护**，因为每个虚拟机同其他虚拟机隔离。当然，隔离不允许直接共享资源&#10;&gt;&#10;&gt; 虚拟机是**研发操作系统的完美载体**。系统开发在虚拟机上而不是在物理硬件上完成，从而不会打扰正常系统运行&#10;&gt;&#10;&gt; 由于需要对下面的机器进行精确的复制，所以虚拟机的**概念实现困难**">
  </outline>
  <outline text="3.7 系统设计目标" _note="用户目标 ：操作系统应该便于使用，易学，可靠，安全并且快捷&#10;&#10;系统目标&#10;：操作系统应该容易设计、实现和维护，还要灵活、可靠、无错误和高效">
  </outline>
</outline>
  </body>
</opml>
