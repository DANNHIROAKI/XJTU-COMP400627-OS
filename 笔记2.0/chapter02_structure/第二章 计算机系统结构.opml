<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="第二章 计算机系统结构">
  <outline text="2.1 计算机系统操作" _note="![](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211002174243584.png)&#10;&#10;-   I/O 设备与CPU可并行运行&#10;&#10;-   每一设备控制器负责一个设备类型&#10;&#10;-   每一设备控制器有一局部缓存&#10;&#10;-   CPU 通过局部缓存与主存交换数据&#10;&#10;-   I/O从设备到设备控制器的局部缓存&#10;&#10;-   设备控制器通过引起*中断* 通知CPU操作已完成">
    <outline text="(1) 中断机制" _note="中断能使系统更高效以及能提高系统的并发度，包括硬件中断与软件中断&#10;&#10;⭐️ **硬件中断**：设备控制器利用中断通知CPU它已经完成了某个操作&#10;&#10;⭐️ **软件中断**：也称为陷阱，包括异常(Exception)与系统调用(System call)&#10;&#10;现代操作系统是中断驱动的，中断会将控制权转移到中断服务程序，有通用的程序检测是否有中断，对于不同的中断会有相应的代码来进行处理。&#10;&#10;**中断向量表与中断向量**&#10;&#10;&gt; 中断向量是中断服务程序的入口地址。&#10;&gt;&#10;&gt; 将所有中断向量集中放在一起，形成中断向量表。8086系统有256个类型的中断源。每个类型对应一个中断向量,一个中断向量由四个字节组成：2个高地址字节：存放中断服务程序的代码段的段值；2个低地址字节：存放中断服务程序的偏移地址。中断向量表放在内存的低段地址0单元开始的单元:00000H~03FFFH。&#10;&#10;![image-20211002175502191](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211002175502191.png)">
    </outline>
    <outline text="(2) I/O中断" _note="两种I/O操作：同步与异步&#10;&#10;&gt; Synchronous同步：当I/O操作开始时，系统会等待I/O操作结束才执行其他的操作&#10;&gt;&#10;&gt; Asynchronous异步：当I/O操作开始时，系统不会等待，而是直接去执行其他的操作&#10;&#10;I/O操作结束后，会触发一个中断通知系统&#10;&#10;![](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211003144659246.png)&#10;&#10;基于中断的方法:&#10;&#10;&gt; **设备状态表：**包含每个I/O设备的条目，其中包括设备类型、地址和状态&#10;&gt;&#10;&gt; 每个I/O设备的**等待队列(**等待请求的列表)">
    </outline>
    <outline text="(3) DMA操作" _note="对于高速设备，用直接内存访问(Direct Memory&#10;Access)，设备控制器在本地缓冲和内存之间直接传输一整块数据而无需CPU干预，降低中断的频率。">
    </outline>
  </outline>
  <outline text="2.2 存储结构" _note="![image-20211003145611294](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211003145611294.png &quot;fig:&quot;)**Speed&#10;速度**&#10;&#10;**cost 成本**&#10;&#10;**volatility 易失性**：断电以后数据会消失，如内存易失，硬盘不易失">
    <outline text="(1) Main Memory" _note="包括随机存取存储器(RAM)，是CPU可以直接访问的唯一大型存储介质（CPU可以直接访问寄存器，cache与主存）&#10;&#10;存储属于与指令&#10;&#10;**缺点：**存储空间不够大以及具有易失性">
    </outline>
    <outline text="(2) Secondary Storage" _note="二级存储，指的主要是磁盘，是主存的扩展&#10;&#10;磁盘是覆盖了磁记录材料的硬金属或玻璃盘片">
    </outline>
    <outline text="(3) Cache" _note="缓存，暂时保存最近访问的数据，访问速度很快。&#10;&#10;命中率：CPU先访问cache，没有相应的数据才去访主存&#10;&#10;&gt; 没有cache的访问时间是100ms，有cache的访问时间为20ms，命中率为80%，平均需要：（100+20)x0.2+20x0.8=40ms，注意都要加上cache的访问时间&#10;&#10;**缺点：**cache的使用会造成数据的不一致，在多道程序、多处理机、分布式下">
    </outline>
  </outline>
  <outline text="2.3 硬件保护" _note="多用户环境，需要保护磁盘上的文件、数据">
    <outline text="(1) Dual-Mode Operation 两状态操作" _note="1️⃣ *User mode* – execution done on behalf of a&#10;user.**用户态**-代表用户执行&#10;&#10;2️⃣ *Monitor mode* (also *supervisor mode* or *system mode*) – execution&#10;done on behalf of operating system.&#10;**管态**（特权模式或系统模式）-代表操作系统执行&#10;&#10;模式位(mode bit)添加到计算机硬件，表示当前模式&#10;&#10;系统引导时，硬件处于管态，在用户模式下执行用户进程；**一开机的时候处于管态，要执行用户程序的时候转换为用户态；当出现中断或者陷阱时，硬件会切换到管态**&#10;&#10;![](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211003152618918.png)&#10;&#10;系统怎么知道要转换为管态？——**引入特权指令**&#10;&#10;特权指令：只能在管态下运行的指令，通常使用系统调用。&#10;&#10;&gt; 在用户态下，需要转换模态才能使用&#10;&gt;&#10;&gt; 在管态下直接使用即可&#10;&#10;⭐️ 特权指令: 设置定时器的值、清除内存、关闭中断&#10;&#10;非特权指令：读时钟、从用户态切换为管态">
    </outline>
    <outline text="(2) I/O Protection" _note="**所有的I/O操作都是特权指令，用户不能直接进行I/O操作，必须通过系统调用**&#10;&#10;![image-20211003153228418](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211003153228418.png &quot;fig:&quot;)&#10;&#10;要保护I/O操作，需要保护中断向量表与中断向量，由于它们时存储在内存中的&#10;&#10;所以必须进行内存保护">
    </outline>
    <outline text="(3) Memory Protection 内存保护" _note="确定进程能访问的合法空间，使用基址寄存器与界限寄存器，即内存的开始地址与长度&#10;&#10;![](C:\Users\26969\AppData\Roaming\Typora\typora-user-images\image-20211003155956820.png)&#10;&#10;基本寄存器和限制寄存器只能由操作系统通过使用特殊的**特权指令**加载，即只能在管态下进行&#10;&#10;在监视器模式下执行时，操作系统对监视器和用户的内存都有无限制的访问">
    </outline>
    <outline text="(4) CPU Protection" _note="防止用户程序陷入死循环或者不调用系统服务且不将控制权返回到OS——设置定时器(Timer)&#10;&#10;定时器：设置定时器产生中断，当定时器到时间了会产生中断，控制权会返回给OS，可以用来实现分时系统">
    </outline>
  </outline>
</outline>
  </body>
</opml>
