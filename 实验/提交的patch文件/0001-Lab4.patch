From 57407a869bf4b567c94ea6db82235de6af52688a Mon Sep 17 00:00:00 2001
From: DUAN <134042675+DANNHIROAKI@users.noreply.github.com>
Date: Sat, 2 Dec 2023 14:20:00 +0800
Subject: [PATCH] Lab4

---
 0001-Lab3.patch | 659 ++++++++++++++++++++++++++++++++++++++++++++++++
 Makefile        |   1 +
 kernel/file.h   |   2 +-
 kernel/fs.c     | 185 +++++++++-----
 kernel/fs.h     |   7 +-
 kernel/param.h  |   2 +-
 6 files changed, 788 insertions(+), 68 deletions(-)
 create mode 100644 0001-Lab3.patch

diff --git a/0001-Lab3.patch b/0001-Lab3.patch
new file mode 100644
index 0000000..6cac918
--- /dev/null
+++ b/0001-Lab3.patch
@@ -0,0 +1,659 @@
+From b0007c597fa2c7659152309dfa765aa2e16dfd25 Mon Sep 17 00:00:00 2001
+From: DUAN <134042675+DANNHIROAKI@users.noreply.github.com>
+Date: Sat, 2 Dec 2023 13:53:49 +0800
+Subject: [PATCH] Lab3
+
+---
+ 0001-Lab2.patch  | 388 +++++++++++++++++++++++++++++++++++++++++++++++
+ Makefile         |   1 +
+ kernel/defs.h    |   1 +
+ kernel/exec.c    |   5 +
+ kernel/riscv.h   |   1 +
+ kernel/syscall.c |   2 +
+ kernel/syscall.h |  45 +++---
+ kernel/sysproc.c |  38 +++++
+ kernel/vm.c      |  40 +++++
+ user/user.h      |   1 +
+ user/usys.pl     |   1 +
+ 11 files changed, 501 insertions(+), 22 deletions(-)
+ create mode 100644 0001-Lab2.patch
+
+diff --git a/0001-Lab2.patch b/0001-Lab2.patch
+new file mode 100644
+index 0000000..45fd16f
+--- /dev/null
++++ b/0001-Lab2.patch
+@@ -0,0 +1,388 @@
++From 195d028613f623f3a39abd9c7ee526cff456a4c2 Mon Sep 17 00:00:00 2001
++From: DUAN <134042675+DANNHIROAKI@users.noreply.github.com>
++Date: Sat, 2 Dec 2023 13:30:32 +0800
++Subject: [PATCH] Lab2
++
++---
++ 0001-Lab1.patch  | 154 +++++++++++++++++++++++++++++++++++++++++++++++
++ Makefile         |   1 +
++ kernel/defs.h    |   2 +
++ kernel/kalloc.c  |  15 +++++
++ kernel/proc.c    |  14 +++++
++ kernel/syscall.c |   2 +
++ kernel/syscall.h |  43 ++++++-------
++ kernel/sysproc.c |  21 +++++++
++ user/user.h      |   2 +
++ user/usys.pl     |   1 +
++ 10 files changed, 234 insertions(+), 21 deletions(-)
++ create mode 100644 0001-Lab1.patch
++
++diff --git a/0001-Lab1.patch b/0001-Lab1.patch
++new file mode 100644
++index 0000000..9efb5ab
++--- /dev/null
+++++ b/0001-Lab1.patch
++@@ -0,0 +1,154 @@
+++From e47fb962401463a072138995730c97276a0a6e8f Mon Sep 17 00:00:00 2001
+++From: DUAN <134042675+DANNHIROAKI@users.noreply.github.com>
+++Date: Sat, 2 Dec 2023 13:19:00 +0800
+++Subject: [PATCH] Lab1
+++
+++---
+++ Makefile     |  2 ++
+++ user/find.c  | 90 ++++++++++++++++++++++++++++++++++++++++++++++++++++
+++ user/sleep.c | 21 ++++++++++++
+++ 3 files changed, 113 insertions(+)
+++ create mode 100644 user/find.c
+++ create mode 100644 user/sleep.c
+++
+++diff --git a/Makefile b/Makefile
+++index 39a99d7..c4fedb0 100644
+++--- a/Makefile
++++++ b/Makefile
+++@@ -132,6 +132,8 @@ UPROGS=\
+++ 	$U/_grind\
+++ 	$U/_wc\
+++ 	$U/_zombie\
++++	$U/_sleep\
++++    $U/_find\
+++ 
+++ fs.img: mkfs/mkfs README $(UPROGS)
+++ 	mkfs/mkfs fs.img README $(UPROGS)
+++diff --git a/user/find.c b/user/find.c
+++new file mode 100644
+++index 0000000..6faa525
+++--- /dev/null
++++++ b/user/find.c
+++@@ -0,0 +1,90 @@
++++#include "kernel/types.h"
++++#include "kernel/stat.h"
++++#include "kernel/fs.h"
++++#include "user/user.h"
++++
++++char* noSpace(char* dir)
++++{
++++static char newDir[DIRSIZ + 1];
++++int space = 0;
++++int buf = 0;
++++char* p = dir + strlen(dir) - 1;
++++while (p >= dir && *p == ' ') {
++++++space;
++++--p;
++++}
++++buf = DIRSIZ - space;
++++memmove(newDir, dir, buf);
++++newDir[buf] = 0;
++++return newDir;
++++}
++++
++++void find(char* dir, char* name)
++++{
++++char buf[512], *p;
++++int fd;
++++struct dirent de;
++++struct stat st;
++++
++++fd = open(dir, 0);
++++if (fd < 0) {
++++fprintf(2, "find: cannot open %s\n", dir);
++++return;
++++}
++++
++++if (fstat(fd, &st) < 0) {
++++fprintf(2, "find: cannot fstat %s\n", dir);
++++close(fd);
++++return;
++++}
++++
++++if (st.type == T_DEVICE || st.type == T_FILE) {
++++printf("find: not a directory value!\n");
++++close(fd);
++++} else if (st.type == T_DIR) {
++++if (strlen(dir) + 1 + DIRSIZ + 1 > sizeof buf) {
++++   printf("ls: path too long\n");
++++} else {
++++   strcpy(buf, dir);
++++   p = buf + strlen(buf);
++++   *p++ = '/';
++++   for (int readBytes = read(fd, &de, sizeof(de)); readBytes == sizeof de; readBytes = read(fd, &de, sizeof(de))) {
++++       if (de.inum == 0)
++++           continue;
++++       if (strcmp(".", noSpace(de.name)) == 0 || strcmp("..", noSpace(de.name)) == 0) {
++++           continue;
++++       }
++++       memmove(p, de.name, DIRSIZ);
++++       p[DIRSIZ] = 0;
++++       if (stat(buf, &st) < 0) {
++++           printf("find: cannot stat '%s'\n", buf);
++++           continue;
++++       }
++++       switch (st.type) {
++++           case T_DIR:
++++               find(buf, name);
++++               break;
++++           default:
++++               if (strcmp(name, noSpace(de.name)) == 0) {
++++                   printf("%s\n", buf);
++++               }
++++               break;
++++       }
++++   }
++++}
++++}
++++close(fd);
++++}
++++
++++int main(int argc, char* argv[])
++++{
++++switch (argc) {
++++case 3:
++++   find(argv[1], argv[2]);
++++   break;
++++default:
++++   printf("Wrong directory or file name!\n");
++++   break;
++++}
++++exit(0);
++++}
+++\ No newline at end of file
+++diff --git a/user/sleep.c b/user/sleep.c
+++new file mode 100644
+++index 0000000..eac0768
+++--- /dev/null
++++++ b/user/sleep.c
+++@@ -0,0 +1,21 @@
++++#include "kernel/types.h"
++++#include "user/user.h"
++++
++++int main(int argc, char *argv[])
++++{
++++switch (argc) {
++++case 2:
++++// 当参数数量正确时
++++int time = atoi(argv[1]);
++++if (sleep(time) != 0) {
++++   printf("Error!\n");
++++}
++++break;
++++
++++default:
++++// 当参数数量不正确时
++++printf("You should input sleep times!\n");
++++}
++++
++++exit(0);
++++}
+++\ No newline at end of file
+++-- 
+++2.34.1.windows.1
+++
++diff --git a/Makefile b/Makefile
++index c4fedb0..cc56a82 100644
++--- a/Makefile
+++++ b/Makefile
++@@ -134,6 +134,7 @@ UPROGS=\
++ 	$U/_zombie\
++ 	$U/_sleep\
++     $U/_find\
+++	$U/_sysinfotest\
++ 
++ fs.img: mkfs/mkfs README $(UPROGS)
++ 	mkfs/mkfs fs.img README $(UPROGS)
++diff --git a/kernel/defs.h b/kernel/defs.h
++index a3c962b..7229d7d 100644
++--- a/kernel/defs.h
+++++ b/kernel/defs.h
++@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
++ void*           kalloc(void);
++ void            kfree(void *);
++ void            kinit(void);
+++uint64          freememcnt(void);
++ 
++ // log.c
++ void            initlog(int, struct superblock*);
++@@ -106,6 +107,7 @@ void            yield(void);
++ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
++ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
++ void            procdump(void);
+++int             proccnt(void);
++ 
++ // swtch.S
++ void            swtch(struct context*, struct context*);
++diff --git a/kernel/kalloc.c b/kernel/kalloc.c
++index 0699e7e..4749500 100644
++--- a/kernel/kalloc.c
+++++ b/kernel/kalloc.c
++@@ -80,3 +80,18 @@ kalloc(void)
++     memset((char*)r, 5, PGSIZE); // fill with junk
++   return (void*)r;
++ }
+++
+++uint64 freememcnt(void)
+++{
+++struct run* r;
+++uint64 freemem = 0;
+++acquire(&kmem.lock);
+++r = kmem.freelist;
+++while(r)
+++{
+++ freemem++;
+++ r = r->next;
+++}
+++release(&kmem.lock);
+++return freemem*4096;
+++}
++\ No newline at end of file
++diff --git a/kernel/proc.c b/kernel/proc.c
++index 959b778..b294709 100644
++--- a/kernel/proc.c
+++++ b/kernel/proc.c
++@@ -681,3 +681,17 @@ procdump(void)
++     printf("\n");
++   }
++ }
+++
+++int proccnt(void)
+++{
+++int nproc = 0;
+++struct proc* p;
+++for (p=proc;p<&proc[NPROC];p++)
+++{
+++ if (p->state != UNUSED)
+++ {
+++   nproc++;
+++ }
+++}
+++return nproc;
+++}
++diff --git a/kernel/syscall.c b/kernel/syscall.c
++index ed65409..6a71b9e 100644
++--- a/kernel/syscall.c
+++++ b/kernel/syscall.c
++@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
++ extern uint64 sys_link(void);
++ extern uint64 sys_mkdir(void);
++ extern uint64 sys_close(void);
+++extern uint64 sys_sysinfo(void);
++ 
++ // An array mapping syscall numbers from syscall.h
++ // to the function that handles the system call.
++@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
++ [SYS_link]    sys_link,
++ [SYS_mkdir]   sys_mkdir,
++ [SYS_close]   sys_close,
+++[SYS_sysinfo] sys_sysinfo,
++ };
++ 
++ void
++diff --git a/kernel/syscall.h b/kernel/syscall.h
++index bc5f356..e763c21 100644
++--- a/kernel/syscall.h
+++++ b/kernel/syscall.h
++@@ -1,22 +1,23 @@
++ // System call numbers
++-#define SYS_fork    1
++-#define SYS_exit    2
++-#define SYS_wait    3
++-#define SYS_pipe    4
++-#define SYS_read    5
++-#define SYS_kill    6
++-#define SYS_exec    7
++-#define SYS_fstat   8
++-#define SYS_chdir   9
++-#define SYS_dup    10
++-#define SYS_getpid 11
++-#define SYS_sbrk   12
++-#define SYS_sleep  13
++-#define SYS_uptime 14
++-#define SYS_open   15
++-#define SYS_write  16
++-#define SYS_mknod  17
++-#define SYS_unlink 18
++-#define SYS_link   19
++-#define SYS_mkdir  20
++-#define SYS_close  21
+++#define SYS_fork     1
+++#define SYS_exit     2
+++#define SYS_wait     3
+++#define SYS_pipe     4
+++#define SYS_read     5
+++#define SYS_kill     6
+++#define SYS_exec     7
+++#define SYS_fstat    8
+++#define SYS_chdir    9
+++#define SYS_dup     10
+++#define SYS_getpid  11
+++#define SYS_sbrk    12
+++#define SYS_sleep   13
+++#define SYS_uptime  14
+++#define SYS_open    15
+++#define SYS_write   16
+++#define SYS_mknod   17
+++#define SYS_unlink  18
+++#define SYS_link    19
+++#define SYS_mkdir   20
+++#define SYS_close   21
+++#define SYS_sysinfo 22
++diff --git a/kernel/sysproc.c b/kernel/sysproc.c
++index 1de184e..241c717 100644
++--- a/kernel/sysproc.c
+++++ b/kernel/sysproc.c
++@@ -5,6 +5,7 @@
++ #include "memlayout.h"
++ #include "spinlock.h"
++ #include "proc.h"
+++#include "sysinfo.h"
++ 
++ uint64
++ sys_exit(void)
++@@ -89,3 +90,23 @@ sys_uptime(void)
++   release(&tickslock);
++   return xticks;
++ }
+++
+++uint64 sys_sysinfo(void)
+++{
+++uint64 si_addr;
+++argaddr(0, &si_addr);
+++
+++struct sysinfo systeminfo;
+++systeminfo.freemem = freememcnt();
+++systeminfo.nproc = proccnt();
+++
+++struct proc* p = myproc();
+++
+++int copyResult = copyout(p->pagetable, si_addr, (char*)&systeminfo, sizeof(systeminfo));
+++switch (copyResult) {
+++ case -1:
+++   return -1;
+++ default:
+++   return 0;
+++}
+++}
++\ No newline at end of file
++diff --git a/user/user.h b/user/user.h
++index 4d398d5..09985e2 100644
++--- a/user/user.h
+++++ b/user/user.h
++@@ -22,6 +22,8 @@ int getpid(void);
++ char* sbrk(int);
++ int sleep(int);
++ int uptime(void);
+++struct sysinfo;
+++int sysinfo(struct sysinfo*);
++ 
++ // ulib.c
++ int stat(const char*, struct stat*);
++diff --git a/user/usys.pl b/user/usys.pl
++index 01e426e..4f1f768 100755
++--- a/user/usys.pl
+++++ b/user/usys.pl
++@@ -36,3 +36,4 @@ entry("getpid");
++ entry("sbrk");
++ entry("sleep");
++ entry("uptime");
+++entry("sysinfo");
++-- 
++2.34.1.windows.1
++
+diff --git a/Makefile b/Makefile
+index cc56a82..9a24c8b 100644
+--- a/Makefile
++++ b/Makefile
+@@ -135,6 +135,7 @@ UPROGS=\
+ 	$U/_sleep\
+     $U/_find\
+ 	$U/_sysinfotest\
++	$U/_pgtbltest\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+diff --git a/kernel/defs.h b/kernel/defs.h
+index 7229d7d..08d9503 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -175,6 +175,7 @@ uint64          walkaddr(pagetable_t, uint64);
+ int             copyout(pagetable_t, uint64, char *, uint64);
+ int             copyin(pagetable_t, char *, uint64, uint64);
+ int             copyinstr(pagetable_t, char *, uint64, uint64);
++void            vmprint(pagetable_t);
+ 
+ // plic.c
+ void            plicinit(void);
+diff --git a/kernel/exec.c b/kernel/exec.c
+index e18bbb6..a530f5a 100644
+--- a/kernel/exec.c
++++ b/kernel/exec.c
+@@ -128,6 +128,11 @@ exec(char *path, char **argv)
+   p->trapframe->sp = sp; // initial stack pointer
+   proc_freepagetable(oldpagetable, oldsz);
+ 
++if (p->pid == 1) 
++{
++ vmprint(p->pagetable);
++}
++
+   return argc; // this ends up in a0, the first argument to main(argc, argv)
+ 
+  bad:
+diff --git a/kernel/riscv.h b/kernel/riscv.h
+index 20a01db..100895e 100644
+--- a/kernel/riscv.h
++++ b/kernel/riscv.h
+@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
+ #define PTE_W (1L << 2)
+ #define PTE_X (1L << 3)
+ #define PTE_U (1L << 4) // user can access
++#define PTE_A (1L << 6)
+ 
+ // shift a physical address to the right place for a PTE.
+ #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index 6a71b9e..c7e2901 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -102,6 +102,7 @@ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
+ extern uint64 sys_sysinfo(void);
++extern uint64 sys_pgaccess(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -128,6 +129,7 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
+ [SYS_sysinfo] sys_sysinfo,
++[SYS_pgaccess] sys_pgaccess,
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index e763c21..2c22eee 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -1,23 +1,24 @@
+ // System call numbers
+-#define SYS_fork     1
+-#define SYS_exit     2
+-#define SYS_wait     3
+-#define SYS_pipe     4
+-#define SYS_read     5
+-#define SYS_kill     6
+-#define SYS_exec     7
+-#define SYS_fstat    8
+-#define SYS_chdir    9
+-#define SYS_dup     10
+-#define SYS_getpid  11
+-#define SYS_sbrk    12
+-#define SYS_sleep   13
+-#define SYS_uptime  14
+-#define SYS_open    15
+-#define SYS_write   16
+-#define SYS_mknod   17
+-#define SYS_unlink  18
+-#define SYS_link    19
+-#define SYS_mkdir   20
+-#define SYS_close   21
+-#define SYS_sysinfo 22
++#define SYS_fork      1
++#define SYS_exit      2
++#define SYS_wait      3
++#define SYS_pipe      4
++#define SYS_read      5
++#define SYS_kill      6
++#define SYS_exec      7
++#define SYS_fstat     8
++#define SYS_chdir     9
++#define SYS_dup      10
++#define SYS_getpid   11
++#define SYS_sbrk     12
++#define SYS_sleep    13
++#define SYS_uptime   14
++#define SYS_open     15
++#define SYS_write    16
++#define SYS_mknod    17
++#define SYS_unlink   18
++#define SYS_link     19
++#define SYS_mkdir    20
++#define SYS_close    21
++#define SYS_sysinfo  22
++#define SYS_pgaccess 23
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 241c717..b6b408a 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -109,4 +109,42 @@ switch (copyResult) {
+  default:
+    return 0;
+ }
++}
++
++int sys_pgaccess(void) {
++ uint64 va;
++ int page;
++ uint64 ua;
++ argaddr(0, &va);
++ argint(1, &page);
++ argaddr(2, &ua);
++
++ const int MAX_PAGE_LIMIT = 1024; 
++ if (page > MAX_PAGE_LIMIT) {
++     return -1;
++ }
++
++ uint64 mask = 0;
++ struct proc* p = myproc();
++ int i = 0;
++ while (i < page) {
++     pte_t* pte = walk(p->pagetable, va + i * PGSIZE, 0);
++     if (pte == 0) {
++         return -1; // 页不存在时返回错误
++     }
++     switch (PTE_FLAGS(*pte) & PTE_A) {
++         case PTE_A:
++             mask |= (1L << i);
++             *pte &= ~PTE_A; // 清除访问位
++             break;
++         default:
++             break;
++     }
++     i++;
++ }
++
++ if (copyout(p->pagetable, ua, (char*)&mask, sizeof(mask)) < 0) {
++     return -1; // 复制失败时返回错误
++ }
++ return 0;
+ }
+\ No newline at end of file
+diff --git a/kernel/vm.c b/kernel/vm.c
+index 9f69783..3f9ea31 100644
+--- a/kernel/vm.c
++++ b/kernel/vm.c
+@@ -437,3 +437,43 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+     return -1;
+   }
+ }
++
++static int depth=0;
++
++void vmprint(pagetable_t pt)
++{
++ if (depth == 0)
++ {
++     printf("page table %p\n", (uint64)pt);
++ }
++
++ int i = 0;
++ while (i < 512)
++ {
++     pte_t pte = pt[i];
++     switch (pte & PTE_V)
++     {
++         case 1:  // 当 pte & PTE_V 为真
++             {
++                 int j = 0;
++                 while (j < depth)
++                 {
++                     printf(".. ");
++                     j++;
++                 }
++                 printf("..%d: pte %p pa %p\n", i, (uint64)pte, (uint64)PTE2PA(pte));
++             }
++             if (!(pte & (PTE_R | PTE_W | PTE_X)))
++             {
++                 depth++;
++                 uint64 pa = PTE2PA(pte);
++                 vmprint((pagetable_t)pa);
++                 depth--;
++             }
++             break;
++         default:
++             break;
++     }
++     i++;
++ }
++}
+\ No newline at end of file
+diff --git a/user/user.h b/user/user.h
+index 09985e2..9de281d 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -24,6 +24,7 @@ int sleep(int);
+ int uptime(void);
+ struct sysinfo;
+ int sysinfo(struct sysinfo*);
++int pgaccess(void* baseVirtualAddr, int pageNum, void* userAddr);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 4f1f768..7fde364 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -37,3 +37,4 @@ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
+ entry("sysinfo");
++entry("pgaccess");
+\ No newline at end of file
+-- 
+2.34.1.windows.1
+
diff --git a/Makefile b/Makefile
index 9a24c8b..79b5117 100644
--- a/Makefile
+++ b/Makefile
@@ -136,6 +136,7 @@ UPROGS=\
     $U/_find\
 	$U/_sysinfotest\
 	$U/_pgtbltest\
+	$U/_bigfile\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/file.h b/kernel/file.h
index b076d1d..5c4eb3a 100644
--- a/kernel/file.h
+++ b/kernel/file.h
@@ -26,7 +26,7 @@ struct inode {
   short minor;
   short nlink;
   uint size;
-  uint addrs[NDIRECT+1];
+  uint addrs[NDIRECT+2];
 };
 
 // map major device number to device functions.
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..f2f2093 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -379,77 +379,136 @@ iunlockput(struct inode *ip)
 // Return the disk block address of the nth block in inode ip.
 // If there is no such block, bmap allocates one.
 // returns 0 if out of disk space.
-static uint
-bmap(struct inode *ip, uint bn)
-{
-  uint addr, *a;
-  struct buf *bp;
-
-  if(bn < NDIRECT){
-    if((addr = ip->addrs[bn]) == 0){
-      addr = balloc(ip->dev);
-      if(addr == 0)
-        return 0;
-      ip->addrs[bn] = addr;
-    }
-    return addr;
-  }
-  bn -= NDIRECT;
-
-  if(bn < NINDIRECT){
-    // Load indirect block, allocating if necessary.
-    if((addr = ip->addrs[NDIRECT]) == 0){
-      addr = balloc(ip->dev);
-      if(addr == 0)
-        return 0;
-      ip->addrs[NDIRECT] = addr;
-    }
-    bp = bread(ip->dev, addr);
-    a = (uint*)bp->data;
-    if((addr = a[bn]) == 0){
-      addr = balloc(ip->dev);
-      if(addr){
-        a[bn] = addr;
-        log_write(bp);
-      }
-    }
-    brelse(bp);
-    return addr;
-  }
+static uint bmap(struct inode* ip, uint bn) {
+uint addr, * a;
+struct buf* bp;
+
+switch (bn < NDIRECT) {
+   case 1:
+       addr = ip->addrs[bn];
+       switch (addr) {
+           case 0:
+               ip->addrs[bn] = addr = balloc(ip->dev);
+               break;
+       }
+       return addr;
+}
+bn -= NDIRECT;
+
+switch (bn < NINDIRECT) {
+   case 1:
+       addr = ip->addrs[NDIRECT];
+       switch (addr) {
+           case 0:
+               ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+               break;
+       }
+       bp = bread(ip->dev, addr);
+       a = (uint*)bp->data;
+       addr = a[bn];
+       switch (addr) {
+           case 0:
+               a[bn] = addr = balloc(ip->dev);
+               log_write(bp);
+               break;
+       }
+       brelse(bp);
+       return addr;
+}
+bn -= NINDIRECT;
+
+switch (bn < NDUOINDIRECT) {
+   case 1:
+       addr = ip->addrs[NDIRECT + 1];
+       switch (addr) {
+           case 0:
+               ip->addrs[NDIRECT + 1] = addr = balloc(ip->dev);
+               break;
+       }
+       bp = bread(ip->dev, addr);
+       a = (uint*)bp->data;
+       addr = a[bn / NINDIRECT];
+       switch (addr) {
+           case 0:
+               a[bn / NINDIRECT] = addr = balloc(ip->dev);
+               log_write(bp);
+               break;
+       }
+       brelse(bp);
+       bp = bread(ip->dev, addr);
+       a = (uint*)bp->data;
+       addr = a[bn % NINDIRECT];
+       switch (addr) {
+           case 0:
+               a[bn % NINDIRECT] = addr = balloc(ip->dev);
+               log_write(bp);
+               break;
+       }
+       brelse(bp);
+       return addr;
+}
 
-  panic("bmap: out of range");
+panic("bmap: out of range");
 }
 
+
 // Truncate inode (discard contents).
 // Caller must hold ip->lock.
-void
-itrunc(struct inode *ip)
-{
-  int i, j;
-  struct buf *bp;
-  uint *a;
+void itrunc(struct inode *ip) {
+int i, j, k;
+struct buf *bp, *bp2;
+uint *a, *a2;
+
+i = 0;
+while(i < NDIRECT) {
+   switch(ip->addrs[i]) {
+       case 0:
+           break;
+       default:
+           bfree(ip->dev, ip->addrs[i]);
+           ip->addrs[i] = 0;
+   }
+   i++;
+}
 
-  for(i = 0; i < NDIRECT; i++){
-    if(ip->addrs[i]){
-      bfree(ip->dev, ip->addrs[i]);
-      ip->addrs[i] = 0;
-    }
-  }
+if(ip->addrs[NDIRECT]) {
+   bp = bread(ip->dev, ip->addrs[NDIRECT]);
+   a = (uint*)bp->data;
+   j = 0;
+   while(j < NINDIRECT) {
+       if(a[j])
+           bfree(ip->dev, a[j]);
+       j++;
+   }
+   brelse(bp);
+   bfree(ip->dev, ip->addrs[NDIRECT]);
+   ip->addrs[NDIRECT] = 0;
+}
 
-  if(ip->addrs[NDIRECT]){
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
-    a = (uint*)bp->data;
-    for(j = 0; j < NINDIRECT; j++){
-      if(a[j])
-        bfree(ip->dev, a[j]);
-    }
-    brelse(bp);
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-    ip->addrs[NDIRECT] = 0;
-  }
+// lab_4
+if(ip->addrs[NDIRECT+1]) {
+   bp = bread(ip->dev, ip->addrs[NDIRECT+1]);
+   a = (uint*)bp->data;
+   for(j = 0; j < NINDIRECT; ++j) {
+       if(a[j]) {
+           bp2 = bread(ip->dev, a[j]);
+           a2 = (uint*)bp2->data;
+           for(k = 0; k < NINDIRECT; ++k) {
+               if(a2[k])
+                   bfree(ip->dev, a2[k]);
+           }
+           brelse(bp2);
+           bfree(ip->dev, a[j]);
+           a[j] = 0;
+       }
+   }
+   brelse(bp);
+   bfree(ip->dev, ip->addrs[NDIRECT+1]);
+   ip->addrs[NDIRECT+1] = 0;
+}
 
-  ip->size = 0;
-  iupdate(ip);
+ip->size = 0;
+iupdate(ip);
 }
 
 // Copy stat information from inode.
diff --git a/kernel/fs.h b/kernel/fs.h
index 139dcc9..27ec282 100644
--- a/kernel/fs.h
+++ b/kernel/fs.h
@@ -24,9 +24,10 @@ struct superblock {
 
 #define FSMAGIC 0x10203040
 
-#define NDIRECT 12
+#define NDIRECT 11
 #define NINDIRECT (BSIZE / sizeof(uint))
-#define MAXFILE (NDIRECT + NINDIRECT)
+#define NDUOINDIRECT (NINDIRECT*NINDIRECT)
+#define MAXFILE (NDIRECT + NINDIRECT + NDUOINDIRECT)
 
 // On-disk inode structure
 struct dinode {
@@ -35,7 +36,7 @@ struct dinode {
   short minor;          // Minor device number (T_DEVICE only)
   short nlink;          // Number of links to inode in file system
   uint size;            // Size of file (bytes)
-  uint addrs[NDIRECT+1];   // Data block addresses
+  uint addrs[NDIRECT+2];   // Data block addresses
 };
 
 // Inodes per block.
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..85c8649 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -9,5 +9,5 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
+#define FSSIZE       200000    // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
-- 
2.34.1.windows.1

