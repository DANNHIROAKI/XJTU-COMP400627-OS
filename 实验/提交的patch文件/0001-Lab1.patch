From e47fb962401463a072138995730c97276a0a6e8f Mon Sep 17 00:00:00 2001
From: DUAN <134042675+DANNHIROAKI@users.noreply.github.com>
Date: Sat, 2 Dec 2023 13:19:00 +0800
Subject: [PATCH] Lab1

---
 Makefile     |  2 ++
 user/find.c  | 90 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 user/sleep.c | 21 ++++++++++++
 3 files changed, 113 insertions(+)
 create mode 100644 user/find.c
 create mode 100644 user/sleep.c

diff --git a/Makefile b/Makefile
index 39a99d7..c4fedb0 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+    $U/_find\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..6faa525
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,90 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/fs.h"
+#include "user/user.h"
+
+char* noSpace(char* dir)
+{
+static char newDir[DIRSIZ + 1];
+int space = 0;
+int buf = 0;
+char* p = dir + strlen(dir) - 1;
+while (p >= dir && *p == ' ') {
+++space;
+--p;
+}
+buf = DIRSIZ - space;
+memmove(newDir, dir, buf);
+newDir[buf] = 0;
+return newDir;
+}
+
+void find(char* dir, char* name)
+{
+char buf[512], *p;
+int fd;
+struct dirent de;
+struct stat st;
+
+fd = open(dir, 0);
+if (fd < 0) {
+fprintf(2, "find: cannot open %s\n", dir);
+return;
+}
+
+if (fstat(fd, &st) < 0) {
+fprintf(2, "find: cannot fstat %s\n", dir);
+close(fd);
+return;
+}
+
+if (st.type == T_DEVICE || st.type == T_FILE) {
+printf("find: not a directory value!\n");
+close(fd);
+} else if (st.type == T_DIR) {
+if (strlen(dir) + 1 + DIRSIZ + 1 > sizeof buf) {
+   printf("ls: path too long\n");
+} else {
+   strcpy(buf, dir);
+   p = buf + strlen(buf);
+   *p++ = '/';
+   for (int readBytes = read(fd, &de, sizeof(de)); readBytes == sizeof de; readBytes = read(fd, &de, sizeof(de))) {
+       if (de.inum == 0)
+           continue;
+       if (strcmp(".", noSpace(de.name)) == 0 || strcmp("..", noSpace(de.name)) == 0) {
+           continue;
+       }
+       memmove(p, de.name, DIRSIZ);
+       p[DIRSIZ] = 0;
+       if (stat(buf, &st) < 0) {
+           printf("find: cannot stat '%s'\n", buf);
+           continue;
+       }
+       switch (st.type) {
+           case T_DIR:
+               find(buf, name);
+               break;
+           default:
+               if (strcmp(name, noSpace(de.name)) == 0) {
+                   printf("%s\n", buf);
+               }
+               break;
+       }
+   }
+}
+}
+close(fd);
+}
+
+int main(int argc, char* argv[])
+{
+switch (argc) {
+case 3:
+   find(argv[1], argv[2]);
+   break;
+default:
+   printf("Wrong directory or file name!\n");
+   break;
+}
+exit(0);
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..eac0768
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+switch (argc) {
+case 2:
+// 当参数数量正确时
+int time = atoi(argv[1]);
+if (sleep(time) != 0) {
+   printf("Error!\n");
+}
+break;
+
+default:
+// 当参数数量不正确时
+printf("You should input sleep times!\n");
+}
+
+exit(0);
+}
\ No newline at end of file
-- 
2.34.1.windows.1

